---
title: "02 Post-alignment QC"
author: Grigorios Georgolopoulos
date: last-modified
theme: yeti
number-sections: true
format:
  html:
    code-fold: true
    toc: true
    toc-location: left
  pdf:
    code-fold: true
    toc: true
    toc-location: left
editor: visual
engine: knitr
---

In this chapter you will learn how to perform quality control (QC) of the aligned reads, check for signal enrichment and generate ATAC-seq signal tracks to be viewed using a genome browser.

**Learning objectives**

1. Check number of aligned reads
2. Check insert size distribution
3. Calculate TSS enrichment
4. Generate bigWigs

# Working with BAM files

The SAM/BAM (Sequence/Binary Alignment Map) format is the most common alignment file format. SAM is a text format which can be viewed directly with any text editor while BAM is compressed binary format for which we need specific tools. For SAM/BAM manipulation, viewing, and querying we use SAMtools [[1](REF)].

The SAM/BAM file consists of the header and the alignment section. The header contains file matadata such as format version, sort order of the alignments, information about the reference sequences used, the read group etc. The alignment section contains detailed mapping (alignment) information for each read such as the location on the reference sequence where it is aligned to, read length, information about mismatches/gaps/inserts etc, mapping quality, etc. Detailed information on the SAM specification can be found [here](https://samtools.github.io/hts-specs/SAMv1.pdf).

Here are some things we can do with SAMtools:
1. View SAM/BAM files
2. Count reads
3. Get summary statistics
4. Calculate fragment size distribution
6. Calculate coverage given a BED file

And many more! You can find out more about the SAMtools tools [here](http://www.htslib.org/doc/samtools-flagstat.html)

## Count number of aligned reads

One of the first step we need to do upon alignment is to figure out if we have sufficient amount of reads for downstream analysis. If the read number is low then any calculations, particularly for genome-wide application, will probably be underpowered. According to [ENCODE data standards for ATAC-seq](https://www.encodeproject.org/atac-seq/), for a successfull ATAC-seq library we need 25 million non-duplicate, non-mitochondrial aligned reads for single-end sequencing and 50 million for paired-ended sequencing (i.e. 25 million fragments)

*Q: Do you know the difference between, read, fragment and insert?*

Let's count how many reads we have in one of our BAM files
```{bash}
DATADIR=data
BAM=$DATADIR/ENCSR558ZSN/ENCFF218OSF.bam

samtools view -c -@ 6 $BAM
```

## Get alignment summary stats

Just getting the number of reads in a BAM file is not enough. A BAM file will contain all the input reads but this does not mean all the reads are aligned. To get a break down of the alignment events in the BAM file we count the different alignment flags. Flags are bitwise attributes that encode an alignment description such as whether the read is mapped or not, whether it is a PCR duplicate, whether it is read1 or read2 etc. More information about the SAM Flags can be found [here](https://en.wikipedia.org/wiki/SAM_(file_format)#Bitwise_flags).

```{bash}
samtools flagstat -@ 6 $BAM
```

In these files, the reads are already filtered. Some typical filtering criteria of ATAC seq aligned reads include:
* Filter for uniquely mapped reads with end-to-end alignment.
* Remove reads mapping to mitochondrial DNA.
* Remove PCR duplicates.

This is how the command would look like:

```bash
samtools view \
-bh \ # Return BAM file and include header
-f 2 \ # Include reads that are mapped in proper pair
-F 1024 \ # Exclude reads that are PCR or optical duplicates
-o filtered.bam \ # Define output file
unfiltered.bam
```

## Indexing BAM files

The speed of reading BAM files relies on an index which allows quick query of coordinate sorted reads. The index files have the `.bai` extension. To generate index files the BAM should be coordinate sorted:

```{bash}
BAM=data/ENCSR558ZSN/ENCFF218OSF.bam 
samtools view -H $BAM | grep SO:
```

## Checking insert sizes

